# Analog
[analog]
# accelerometer device name for Nexus reads
accelerometer_devname = 'Myon Accelerometers'

# Autoprocessing
[autoproc]
# leave this many frames margin when cropping trial
crop_margin = 10
# skip trials with these strings in Eclipse description/notes
eclipse_skip = ['unipedal', 'standing']
# Eclipse key to write (None or empty to disable Eclipse writing)
eclipse_write_key = 'DESCRIPTION'
# Eclipse strings to write for different processing conditions
enf_descriptions = {'automark_failure': 'automark failed',
 'context_both': 'rl',
 'context_left': 'l',
 'context_none': 'no contact',
 'context_right': 'r',
 'dir_backward': 'B',
 'dir_forward': 'F',
 'gaps': 'gaps',
 'label_failure': 'labelling failed',
 'no_frames_in_range': 'no frames inside events_range',
 'ok': 'ok',
 'short': 'short trial'}
# range of gait 'forward' coordinate where to mark events (mm)
events_range = [-2000, 2000]
# fail autoproc on trials with gaps
fail_on_gaps = False
# foot length relative to ANK-HEE marker distance (for estimated foot length)
foot_relative_len = 3.75
# relative force threshold (of subject weight) for detecting contact
forceplate_contact_threshold = 0.05
# max force must exceed this (relative to subject weight)
forceplate_min_weight = 0.9
# do not check gaps or labeling for these markers
ignore_markers = []
# left foot markers
left_foot_markers = ['LHEE', 'LTOE', 'LANK']
# marker diameter (mm)
marker_diam = 14
# min acceptable trial duration (frames)
min_trial_duration = 100
# pipelines for model stage, e.g. plug-in gait
model_pipelines = ['Dynamic model']
# Nexus timeout for save, pipelines etc.
nexus_timeout = 600
# pipelines to run for tagged trials only, after all processing is done
postproc_pipelines = ['Export overlay videos']
# preprocessing pipelines; should include recon, label and filter
pre_pipelines = ['Reconstruct and label', 'Gap fill', 'Filter']
# right foot markers
right_foot_markers = ['RHEE', 'RTOE', 'RANK']
# start marking events on first forceplate contact
start_on_forceplate = False
# default threshold for foot strike (rel to maximum velocity)
strike_vel_threshold = 0.2
# default threshold for toeoff (rel to maximum velocity)
toeoff_vel_threshold = 0.45
# markers used for tracking the body position
track_markers = ['RASI', 'LASI']
# skip trials with these Eclipse types
type_skip = ['Static']
# use Eclipse forceplate info when autoprocessing
use_eclipse_fp_info = False
# fixed velocity thresholds for automarking
use_fp_vel_thresholds = True
# reset Eclipse forceplate info according to our detection
write_eclipse_fp_info = True

# Eclipse database
[eclipse]
# tags for representative trials
repr_tags = ['E1', 'T1']
# which Eclipse keys to search for tags
tag_keys = ['DESCRIPTION', 'NOTES']
# Eclipse tags for trials of interest
tags = ['E1', 'E2', 'E3', 'E4', 'T1', 'T2', 'T3', 'T4']
# additional tags for video trials (used by the web report)
video_tags = ['Toe standing', 'Unipedal right', 'Unipedal left']

# EMG
[emg]
# Python dict of EMG channel names / descriptions
channel_labels = {'LGas': 'Gastrocnemius (L)',
 'LGlut': 'Gluteus (L)',
 'LHam': 'Medial hamstrings (L)',
 'LPer': 'Peroneus (L)',
 'LRec': 'Rectus femoris (L)',
 'LSol': 'Soleus (L)',
 'LTibA': 'Tibialis anterior (L)',
 'LVas': 'Vastus (L)',
 'RGas': 'Gastrocnemius (R)',
 'RGlut': 'Gluteus (R)',
 'RHam': 'Medial hamstrings (R)',
 'RPer': 'Peroneus (R)',
 'RRec': 'Rectus femoris (R)',
 'RSol': 'Soleus (R)',
 'RTibA': 'Tibialis anterior (R)',
 'RVas': 'Vastus (R)'}
# EMG normal data, i.e. expected activation ranges for channels
channel_normaldata = {'LGas': [[16, 50]],
 'LGlut': [[0, 42], [96, 100]],
 'LHam': [[0, 2], [92, 100]],
 'LPer': [[4, 54]],
 'LRec': [[0, 14], [56, 100]],
 'LSol': [[10, 54]],
 'LTibA': [[0, 12], [56, 100]],
 'LVas': [[0, 24], [96, 100]],
 'RGas': [[16, 50]],
 'RGlut': [[0, 42], [96, 100]],
 'RHam': [[0, 2], [92, 100]],
 'RPer': [[4, 54]],
 'RRec': [[0, 14], [56, 100]],
 'RSol': [[10, 54]],
 'RTibA': [[0, 12], [56, 100]],
 'RVas': [[0, 24], [96, 100]]}
# EMG device name for Nexus reads
devname = 'Myon EMG'
# power line frequency, used for detecting artifacts
linefreq = 50
# max. rel interference, line versus broadband (dB)
max_interference = 12
# EMG passband (Hz)
passband = (20, 400)
# RMS window length (samples)
rms_win = 31

# General
[general]
# allow starting multiple copies of gaitmenu
allow_multiple_menu_instances = False
# web browser for viewing web reports
browser_path = 'C:/Program Files (x86)/Google/Chrome/Application/chrome.exe'
# descriptions for Nexus camera ids
camera_labels = {'2111290': 'Side camera',
 '2114528': 'Rear camera',
 '2114551': 'Front camera',
 '59875835': 'Front camera',
 '64826554': 'Side camera'}
# experimental automatic update when using git repo
git_autoupdate = False
# whether to report exceptions via GUI dialog when running command line scripts
gui_exceptions = False
# age specific normal data files, keyed with age range
normaldata_age = {(3, 6): 'Z:\\PXD_files\\muscle_length_3_6.xlsx',
 (7, 12): 'Z:\\PXD_files\\muscle_length_7_12.xlsx',
 (13, 19): 'Z:\\PXD_files\\muscle_length_13_19.xlsx'}
# list of normal data files, in .gcd or .xlsx formats. 'default' to use Vicon supplied normal data
normaldata_files = 'default'
# Vicon installation path
vicon_path = 'C:/Program Files (x86)/Vicon'
# options for video converter
videoconv_opts = ''
# path to web report video converter. 'default' to use included ffmpeg2theora
videoconv_path = 'default'

# Plot layouts
[layouts]
# CGM2 foot angles
cgm2_forefoot = [['ForeFootAnglesX', 'ForeFootAnglesZ', 'ForeFootAnglesY']]
# PiG lower body kinematics + CGM2 foot angles
cgm2_kinematics = [['PelvisAnglesX', 'PelvisAnglesY', 'PelvisAnglesZ'],
 ['HipAnglesX', 'HipAnglesY', 'HipAnglesZ'],
 ['KneeAnglesX', 'KneeAnglesY', 'KneeAnglesZ'],
 ['AnkleAnglesX', 'FootProgressAnglesZ', 'AnkleAnglesZ'],
 ['ForeFootAnglesX', 'ForeFootAnglesZ', 'ForeFootAnglesY']]
# PiG lower body kinematics + kinetics
lb_kin = [['PelvisAnglesX', 'PelvisAnglesY', 'PelvisAnglesZ'],
 ['HipAnglesX', 'HipAnglesY', 'HipAnglesZ'],
 ['KneeAnglesX', 'KneeAnglesY', 'KneeAnglesZ'],
 ['AnkleAnglesX', 'FootProgressAnglesZ', 'AnkleAnglesZ'],
 ['HipMomentX', 'HipMomentY', 'HipMomentZ'],
 ['HipPowerZ', 'KneeMomentX', 'KneeMomentY'],
 ['KneeMomentZ', 'KneePowerZ', 'AnkleMomentX'],
 [None, None, 'AnklePowerZ']]
# PiG lower body kinematics + kinetics, web report version              
lb_kin_web = [['HipAnglesY', 'HipAnglesX', 'KneeAnglesX', 'AnkleAnglesX'],
 ['HipMomentY', 'HipMomentX', 'KneeMomentX', 'AnkleMomentX'],
 [None, 'HipPowerZ', 'KneePowerZ', 'AnklePowerZ']]
# PiG lower body kinematics
lb_kinematics = [['PelvisAnglesX', 'PelvisAnglesY', 'PelvisAnglesZ'],
 ['HipAnglesX', 'HipAnglesY', 'HipAnglesZ'],
 ['KneeAnglesX', 'KneeAnglesY', 'KneeAnglesZ'],
 ['AnkleAnglesX', 'FootProgressAnglesZ', 'AnkleAnglesZ']]
# kinematics + EMG left side
lb_kinematics_emg_l = [['HipAnglesX', 'KneeAnglesX', 'AnkleAnglesX'],
 ['LHam', 'LRec', 'LTibA'],
 ['LGlut', 'LVas', 'LPer'],
 ['LRec', 'LHam', 'LGas'],
 [None, 'LGlut', 'LSol'],
 [None, 'LGas', None]]
# kinematics + EMG right side
lb_kinematics_emg_r = [['HipAnglesX', 'KneeAnglesX', 'AnkleAnglesX'],
 ['RHam', 'RRec', 'RTibA'],
 ['RGlut', 'RVas', 'RPer'],
 ['RRec', 'RHam', 'RGas'],
 [None, 'RGlut', 'RSol'],
 [None, 'RGas', None]]
# PiG lower body kinetics
lb_kinetics = [['HipMomentX', 'HipMomentY', 'HipMomentZ'],
 ['HipPowerZ', 'KneeMomentX', 'KneeMomentY'],
 ['KneeMomentZ', 'KneePowerZ', 'AnkleMomentX'],
 [None, None, 'AnklePowerZ'],
 ['NormalisedGRFX', 'NormalisedGRFY', 'NormalisedGRFZ']]
# kinetics + EMG left side
lb_kinetics_emg_l = [['LHipAnglesX', 'LKneeAnglesX', 'LAnkleAnglesX'],
 ['LHam', 'LRec', 'LTibA'],
 ['LGlut', 'LVas', 'LPer'],
 ['LHipMomentX', 'LKneeMomentX', 'LAnkleMomentX'],
 ['LRec', 'LHam', 'LGas'],
 [None, 'LGlut', 'LSol'],
 [None, 'LGas', None],
 ['LHipPowerZ', 'LKneePowerZ', 'LAnklePowerZ']]
# kinetics + EMG right side
lb_kinetics_emg_r = [['RHipAnglesX', 'RKneeAnglesX', 'RAnkleAnglesX'],
 ['RHam', 'RRec', 'RTibA'],
 ['RGlut', 'RVas', 'RPer'],
 ['RHipMomentX', 'RKneeMomentX', 'RAnkleMomentX'],
 ['RRec', 'RHam', 'RGas'],
 [None, 'RGlut', 'RSol'],
 [None, 'RGas', None],
 ['RHipPowerZ', 'RKneePowerZ', 'RAnklePowerZ']]
# PiG lower body kinetics, web report version                            
lb_kinetics_web = [['HipMomentX', 'HipMomentY', 'HipMomentZ', 'HipPowerZ'],
 ['KneeMomentX', 'KneeMomentY', 'KneeMomentZ', 'KneePowerZ'],
 [None, 'AnkleMomentX', 'AnkleMomentY', 'AnklePowerZ'],
 [None, 'NormalisedGRFX', 'NormalisedGRFY', 'NormalisedGRFZ']]
# muscle length
musclelen = [['PsoaLength', 'GracLength', 'ReFeLength'],
 ['BiFLLength', 'SeTeLength', 'SeMeLength'],
 ['MeGaLength', 'LaGaLength', 'SoleLength']]
# Oxford foot model
ofm = [['HFTBAX', 'HFTBAZ', 'HFTBAY'],
 ['FFHFAX', 'FFHFAZ', 'FFHFAY'],
 ['FFTBAX', 'FFTBAZ', 'FFTBAY'],
 ['HXFFAX', None, 'HXFFAY']]
# EMG left + right side
std_emg = [['LGlut', 'RGlut'],
 ['LHam', 'RHam'],
 ['LRec', 'RRec'],
 ['LVas', 'RVas'],
 ['LTibA', 'RTibA'],
 ['LPer', 'RPer'],
 ['LGas', 'RGas'],
 ['LSol', 'RSol']]

# Plotting
[plot]
# default plotting backend
backend = 'plotly'
# color cycle
colors = ['#1f77b4',
 '#ff7f0e',
 '#2ca02c',
 '#d62728',
 '#9467bd',
 '#8c564b',
 '#e377c2',
 '#7f7f7f',
 '#bcbd22',
 '#17becf']
# colors for R/L contexts
context_colors = {'L': '#ff0000', 'R': '#3f00ff'}
# line styles for R/L contexts
context_styles = {'L': '--', 'R': '-'}
# default gait cycles to plot for EMG variables
default_emg_cycles = ('1st_forceplate', 0)
# default gait cycles to plot for model variables
default_model_cycles = 'all'
# alpha value (transparency) for EMG traces
emg_alpha = 0.6
# how to color EMG traces
emg_color_by = 'trial'
# line width for EMG plots
emg_linewidth = 1
# multiplier for EMG; e.g. 1000 will plot EMG in millivolts
emg_multiplier = 1000.0
# alpha value (transparency) for EMG normal data
emg_normals_alpha = 0.1
# color value for EMG normal data
emg_normals_color = '#ff0000'
# line width for EMG RMS
emg_rms_linewidth = 1.5
# EMG units; should take into account the multiplier
emg_ylabel = 'mV'
# fixed scale for EMG plots (volts)
emg_yscale = 0.0005
# plot line styles in order of preference
linestyles = ['-', '--', '..', '-.']
# alpha value (transparency) for model data
model_alpha = 0.6
# how to color model traces
model_color_by = 'context'
# line width for model data
model_linewidth = 1.5
# alpha value (transparency) for model normal data
model_normals_alpha = 0.5
# color value for model normal data
model_normals_color = '#A0A0A0'
# alpha value (transparency) for model stddev data
model_stddev_alpha = 0.3
# colors for stddev data (context specific)
model_stddev_colors = {'L': '#ff0000', 'R': '#3f00ff'}
# how to style model traces
model_style_by = None

# Matplotlib
[plot_matplotlib]
# relative plot height for analog variables
analog_plotheight = 0.667
# figure inches per column
inch_per_col = 4.5
# figure inches per row
inch_per_row = 1.25
# font size for axis labels
label_fontsize = 8
# font size for legend
legend_fontsize = 8
# font size for main title
maintitle_fontsize = 9
# max figure height
maxh = 9.25
# max figure width
maxw = 20.0
# matplotlib style
mpl_style = 'seaborn-whitegrid'
# font size for subplot titles
subtitle_fontsize = 8
# font size for axis ticks
ticks_fontsize = 8

# Plotly
[plot_plotly]
# font size for axis labels
label_fontsize = 9
# font size for legend
legend_fontsize = 12
# font size for subplot titles
subtitle_fontsize = 13

# Tardieu
[tardieu]
# accelerometer device names
acc_chs = []
# EMG channel names (without the preceding 'R' or 'L')
emg_chs = ['TibA', 'Per', 'Sol', 'Gas']
# markers that define the joint, in correct order (middle one is the 'hinge')
marker_names = ['Toe', 'Ankle', 'Knee']

# Trial
[trial]
# use Eclipse forceplate info when loading trial
use_eclipse_fp_info = True

# Web report
[web_report]
# how to color EMG traces in comparison reports
comparison_emg_color_by = 'session'
# use EMG RMS in comparison reports
comparison_emg_rms = True
# legend type for comparison reports
comparison_legend_type = 'short_name_with_tag_and_cycle'
# how to color model traces in comparison reports
comparison_model_color_by = 'context'
# how to style model traces in comparison reports
comparison_model_style_by = 'session'
# how to color EMG traces
emg_color_by = 'trial'
# legend type for single session reports
legend_type = 'tag_with_cycle'
# maximum number of reports that may be open simultaneously
max_reports = 16
# how to color model traces
model_color_by = 'context'
# how to style model traces
model_style_by = None
# where to start allocating tcp ports for reports
tcp_port = 50000
