# Analog
[analog]
# accelerometer device name for Nexus reads
accelerometer_devname = {'type': 'str'}

# Autoprocessing
[autoproc]
# check whether all required markers exist and have trajectories
check_marker_set = {'type': 'bool'}
# leave this many frames margin when cropping trial
crop_margin = {'max': 0, 'min': 0, 'step': 0, 'type': 'int'}
# whether to delete c3d files before autoprocessing
delete_c3ds = {'type': 'bool'}
# skip trials with these strings in Eclipse description/notes
eclipse_skip = {'type': 'list'}
# Eclipse key to write (None or empty to disable Eclipse writing)
eclipse_write_key = {'type': 'str'}
# Eclipse strings to write for different processing conditions
enf_descriptions = {'type': 'dict'}
# range of gait 'forward' coordinate where to mark events (mm)
events_range = {'type': 'list'}
# fail autoproc on trials with gaps
fail_on_gaps = {'type': 'bool'}
# foot length relative to ANK-HEE marker distance (for estimated foot length)
foot_relative_len = {'max': 0, 'min': 0, 'step': 0, 'type': 'float'}
# relative force threshold (of subject weight) for detecting contact
forceplate_contact_threshold = {'max': 0, 'min': 0, 'step': 0, 'type': 'float'}
# max force must exceed this (relative to subject weight)
forceplate_min_weight = {'max': 0, 'min': 0, 'step': 0, 'type': 'float'}
# do not check gaps or labeling for these markers
ignore_markers = {'type': 'list'}
# left foot markers
left_foot_markers = {'type': 'list'}
# marker diameter (mm)
marker_diam = {'max': 0, 'min': 0, 'step': 0, 'type': 'int'}
# min acceptable trial duration (frames)
min_trial_duration = {'max': 0, 'min': 0, 'step': 0, 'type': 'int'}
# pipelines for model stage, e.g. plug-in gait
model_pipelines = {'type': 'list'}
# Nexus forceplate names, leave empty to use all plates
nexus_forceplate_devnames = {'type': 'list'}
# Nexus timeout for save, pipelines etc.
nexus_timeout = {'max': 0, 'min': 0, 'step': 0, 'type': 'int'}
# postprocessing pipelines for tagged trials, ran via separate op in the menu
postproc_pipelines = {'type': 'list'}
# preprocessing pipelines; should include recon, label and filter
pre_pipelines = {'type': 'list'}
# right foot markers
right_foot_markers = {'type': 'list'}
# run model pipelines only (skip c3d deletion, preprocessing and event marking)
run_models_only = {'type': 'bool'}
# start marking events on first forceplate contact
start_on_forceplate = {'type': 'bool'}
# default threshold for foot strike (rel to maximum velocity)
strike_vel_threshold = {'max': 0, 'min': 0, 'step': 0, 'type': 'float'}
# default threshold for toeoff (rel to maximum velocity)
toeoff_vel_threshold = {'max': 0, 'min': 0, 'step': 0, 'type': 'float'}
# markers used for tracking the body position
track_markers = {'type': 'list'}
# skip trials with these Eclipse types
type_skip = {'type': 'list'}
# use Eclipse forceplate info when autoprocessing
use_eclipse_fp_info = {'type': 'bool'}
# determine event velocity thresholds from forceplates
use_fp_vel_thresholds = {'type': 'bool'}
# what to do with Eclipse forceplate info. 'write' to write autodetected values, 'reset' to reset
write_eclipse_fp_info = {'type': 'str'}

# Eclipse database
[eclipse]
# Eclipse tags for representative trials
repr_tags = {'type': 'list'}
# which Eclipse keys to search for tags
tag_keys = {'type': 'list'}
# Eclipse tags for trials of interest
tags = {'type': 'list'}
# additional tags for video trials (used by the web report)
video_tags = {'type': 'list'}

# EMG
[emg]
# autodetect bad channels
autodetect_bads = {'type': 'bool'}
# context (L/R) for each EMG channel (if applicable)
channel_context = {'type': 'dict'}
# EMG channel labels
channel_labels = {'type': 'dict'}
# manually disable EMG channels
chs_disabled = {'type': 'list'}
# EMG device name for Nexus reads
devname = {'type': 'str'}
# algorithm for computing EMG envelopes; 'rms' or 'linear_envelope'
envelope_method = {'type': 'str'}
# lowpass frequency for linear envelope (Hz)
linear_envelope_lowpass = {'max': 0, 'min': 0, 'step': 0, 'type': 'int'}
# EMG normal data, i.e. expected activation ranges for channels
normaldata_file = {'type': 'str'}
# EMG passband (Hz)
passband = {'type': 'tuple'}
# RMS window length (samples)
rms_win = {'max': 0, 'min': 0, 'step': 0, 'type': 'int'}
# acceptable variance range for EMG signals
variance_ok = {'type': 'tuple'}

# General
[general]
# allow starting multiple copies of gaitmenu
allow_multiple_menu_instances = {'type': 'bool'}
# web browser for viewing web reports
browser_path = {'type': 'str'}
# descriptions for Nexus camera ids
camera_labels = {'type': 'dict'}
# experimental automatic update when using git repo
git_autoupdate = {'type': 'bool'}
# whether to report exceptions via GUI dialog when running command line scripts
gui_exceptions = {'type': 'bool'}
# age specific normal data files, keyed with age range
normaldata_age = {'type': 'dict'}
# list of normal data files, in .gcd or .xlsx formats. 'default' to use Vicon supplied normal data
normaldata_files = {'type': 'str'}
# Vicon installation path
vicon_path = {'type': 'str'}
# options for video converter
videoconv_opts = {'type': 'str'}
# path to web report video converter. 'default' to use included ffmpeg2theora
videoconv_path = {'type': 'str'}

# Plot layouts
[layouts]
# CGM2 foot angles
cgm2_forefoot = {'type': 'list'}
# PiG lower body kinematics + CGM2 foot angles
cgm2_kinematics = {'type': 'list'}
# PiG lower body kinematics + kinetics
lb_kin = {'type': 'list'}
# PiG lower body kinematics + kinetics, web report version              
lb_kin_web = {'type': 'list'}
# PiG lower body kinematics
lb_kinematics = {'type': 'list'}
# kinematics + EMG left side
lb_kinematics_emg_l = {'type': 'list'}
# kinematics + EMG right side
lb_kinematics_emg_r = {'type': 'list'}
# PiG lower body kinetics
lb_kinetics = {'type': 'list'}
# kinetics + EMG left side
lb_kinetics_emg_l = {'type': 'list'}
# kinetics + EMG right side
lb_kinetics_emg_r = {'type': 'list'}
# PiG lower body kinetics, web report version                            
lb_kinetics_web = {'type': 'list'}
# muscle length
musclelen = {'type': 'list'}
# Oxford foot model
ofm = {'type': 'list'}
# PiG lower body markers
pig_lowerbody_markers = {'type': 'list'}
# EMG left + right side
std_emg = {'type': 'list'}
# PiG torso
torso = {'type': 'list'}

# Models
[models]
# add the tibial torsion value to knee rotation
add_tibial_torsion = {'type': 'bool'}

# Plotting
[plot]
# default plotting backend
backend = {'type': 'str'}
# how to color traces
color_by = {'type': 'dict'}
# color cycle
colors = {'type': 'list'}
# colors for R/L contexts
context_colors = {'type': 'dict'}
# default gait cycles to plot for each variable type
default_cycles = {'type': 'dict'}
# alpha value (transparency) for EMG traces
emg_alpha = {'max': 0, 'min': 0, 'step': 0, 'type': 'float'}
# line width for EMG envelope
emg_envelope_linewidth = {'max': 0, 'min': 0, 'step': 0, 'type': 'float'}
# scale adjustment for envelope plots (which have smaller amplitude)
emg_envelope_rel_yscale = {'max': 0, 'min': 0, 'step': 0, 'type': 'float'}
# line width for EMG plots
emg_linewidth = {'max': 0, 'min': 0, 'step': 0, 'type': 'int'}
# multiplier for EMG; e.g. 1000 will plot EMG in millivolts
emg_multiplier = {'max': 0, 'min': 0, 'step': 0, 'type': 'float'}
# alpha value (transparency) for EMG normal data
emg_normals_alpha = {'max': 0, 'min': 0, 'step': 0, 'type': 'float'}
# color value for EMG normal data
emg_normals_color = {'type': 'str'}
# EMG units; should take into account the multiplier
emg_ylabel = {'type': 'str'}
# fixed scale for EMG plots (volts)
emg_yscale = {'max': 0, 'min': 0, 'step': 0, 'type': 'float'}
# legend type for gui plotter
gui_plotter_legend_type = {'type': 'str'}
# line styles in order of preference (matplotlib style specifiers)
linestyles = {'type': 'list'}
# max cycles to plot for each variable type; None for no limit
max_cycles = {'type': 'dict'}
# alpha value (transparency) for model data
model_alpha = {'max': 0, 'min': 0, 'step': 0, 'type': 'float'}
# line width for model data
model_linewidth = {'max': 0, 'min': 0, 'step': 0, 'type': 'float'}
# alpha value (transparency) for model normal data
model_normals_alpha = {'max': 0, 'min': 0, 'step': 0, 'type': 'float'}
# color value for model normal data
model_normals_color = {'type': 'str'}
# alpha value (transparency) for model stddev data
model_stddev_alpha = {'max': 0, 'min': 0, 'step': 0, 'type': 'float'}
# how to style traces; EMG style is currently ignored
style_by = {'type': 'dict'}

# Matplotlib
[plot_matplotlib]
# relative plot height for analog variables
analog_plotheight = {'max': 0, 'min': 0, 'step': 0, 'type': 'float'}
# figure inches per column
inch_per_col = {'max': 0, 'min': 0, 'step': 0, 'type': 'float'}
# figure inches per row
inch_per_row = {'max': 0, 'min': 0, 'step': 0, 'type': 'float'}
# font size for axis labels
label_fontsize = {'max': 0, 'min': 0, 'step': 0, 'type': 'int'}
# font size for legend
legend_fontsize = {'max': 0, 'min': 0, 'step': 0, 'type': 'int'}
# font size for main title
maintitle_fontsize = {'max': 0, 'min': 0, 'step': 0, 'type': 'int'}
# max figure height
maxh = {'max': 0, 'min': 0, 'step': 0, 'type': 'float'}
# max figure width
maxw = {'max': 0, 'min': 0, 'step': 0, 'type': 'float'}
# matplotlib style
mpl_style = {'type': 'str'}
# font size for subplot titles
subtitle_fontsize = {'max': 0, 'min': 0, 'step': 0, 'type': 'int'}
# font size for axis ticks
ticks_fontsize = {'max': 0, 'min': 0, 'step': 0, 'type': 'int'}

# Plotly
[plot_plotly]
# font size for axis labels
label_fontsize = {'max': 0, 'min': 0, 'step': 0, 'type': 'int'}
# font size for legend
legend_fontsize = {'max': 0, 'min': 0, 'step': 0, 'type': 'int'}
# font size for subplot titles
subtitle_fontsize = {'max': 0, 'min': 0, 'step': 0, 'type': 'int'}

# Report
[report]
# how to color traces
color_by = {'type': 'dict'}
# how to color traces in comparison reports
comparison_color_by = {'type': 'dict'}
# use EMG RMS in comparison reports
comparison_emg_as_envelope = {'type': 'bool'}
# legend type for comparison reports
comparison_legend_type = {'type': 'str'}
# how to style traces in comparison reports
comparison_style_by = {'type': 'dict'}
# laboratory name
laboratory_name = {'type': 'str'}
# report language; use None for English
language = {'type': 'NoneType'}
# legend type for single session reports
legend_type = {'type': 'str'}
# how to style traces; EMG style is currently ignored
style_by = {'type': 'dict'}
# layouts for curve-extracted value plots
vardefs = {'type': 'list'}

# Tardieu
[tardieu]
# accelerometer device names
acc_chs = {'type': 'list'}
# EMG channel names (without the preceding 'R' or 'L')
emg_chs = {'type': 'list'}
# markers that define the joint, in correct order (middle one is the 'hinge')
marker_names = {'type': 'list'}

# Trial
[trial]
# prefer to load Nexus trials via c3d if it exists (if False, load via Nexus Python API)
load_from_c3d = {'type': 'bool'}
# how to handle gait cycles with multiple toeoffs: 'reject', 'accept_first' or 'error'
multiple_toeoffs = {'type': 'str'}
# how to handle gait cycles with a missing toeoff event: 'reject' or 'error'
no_toeoff = {'type': 'str'}
# P threshold for automatic rejection in averager; None for no rejection
outlier_rejection_threshold = {'type': 'NoneType'}
# use Eclipse forceplate info when loading trial
use_eclipse_fp_info = {'type': 'bool'}

# Web report
[web_report]
# maximum number of reports that may be open simultaneously
max_reports = {'max': 0, 'min': 0, 'step': 0, 'type': 'int'}
# web report page layouts
page_layouts = {'type': 'list'}